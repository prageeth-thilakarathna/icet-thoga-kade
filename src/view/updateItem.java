/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.centralController;
import database.databaseConnection;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author ygpra
 */
public class updateItem extends javax.swing.JPanel {

    private static final updateItem instance = new updateItem();
    private String searchDescription;
    private double searchUnitPrice;
    private int searchQtyOnHand;

    /**
     * Creates new form updateItem
     */
    private updateItem() {
        initComponents();
        btnUpdate.setEnabled(false);
        descriptionInput.setEditable(false);
        descriptionInput.setBackground(centralController.DarkGrey);
        unitPriceInput.setEditable(false);
        unitPriceInput.setBackground(centralController.DarkGrey);
        qtyOnHandInput.setEditable(false);
        qtyOnHandInput.setBackground(centralController.DarkGrey);
    }

    public static updateItem getUpdateItemInstance() {
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        forItemCode = new javax.swing.JLabel();
        itemCodeInput = new javax.swing.JTextField();
        forDescription = new javax.swing.JLabel();
        forUnitPrice = new javax.swing.JLabel();
        forQtyOnHand = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        descriptionInput = new javax.swing.JTextField();
        unitPriceInput = new javax.swing.JTextField();
        qtyOnHandInput = new javax.swing.JTextField();
        unitPriceErrorDisplay = new javax.swing.JLabel();
        qtyOnHandErrorDisplay = new javax.swing.JLabel();

        setBackground(new java.awt.Color(239, 241, 255));

        title.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        title.setForeground(new java.awt.Color(12, 0, 0));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Update Item");

        forItemCode.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        forItemCode.setForeground(new java.awt.Color(12, 0, 0));
        forItemCode.setText("Enter Item Code :");

        itemCodeInput.setBackground(new java.awt.Color(199, 200, 204));
        itemCodeInput.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        itemCodeInput.setForeground(new java.awt.Color(12, 0, 0));
        itemCodeInput.setBorder(null);
        itemCodeInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                itemCodeKeyTyped(evt);
            }
        });

        forDescription.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        forDescription.setForeground(new java.awt.Color(12, 0, 0));
        forDescription.setText("Description : ");

        forUnitPrice.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        forUnitPrice.setForeground(new java.awt.Color(12, 0, 0));
        forUnitPrice.setText("Unit Price : ");

        forQtyOnHand.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        forQtyOnHand.setForeground(new java.awt.Color(12, 0, 0));
        forQtyOnHand.setText("Qty On Hand : ");

        btnUpdate.setBackground(new java.awt.Color(0, 127, 115));
        btnUpdate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(239, 241, 255));
        btnUpdate.setText("Update");
        btnUpdate.setBorder(null);
        btnUpdate.setBorderPainted(false);
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.setFocusPainted(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateAction(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(98, 99, 213));
        btnCancel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(239, 241, 255));
        btnCancel.setText("Cancel");
        btnCancel.setBorder(null);
        btnCancel.setBorderPainted(false);
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancel.setFocusPainted(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelAction(evt);
            }
        });

        descriptionInput.setBackground(new java.awt.Color(199, 200, 204));
        descriptionInput.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        descriptionInput.setForeground(new java.awt.Color(12, 0, 0));
        descriptionInput.setBorder(null);
        descriptionInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                descriptionKeyTyped(evt);
            }
        });

        unitPriceInput.setBackground(new java.awt.Color(199, 200, 204));
        unitPriceInput.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        unitPriceInput.setForeground(new java.awt.Color(12, 0, 0));
        unitPriceInput.setBorder(null);
        unitPriceInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                unitPriceKeyTyped(evt);
            }
        });

        qtyOnHandInput.setBackground(new java.awt.Color(199, 200, 204));
        qtyOnHandInput.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        qtyOnHandInput.setForeground(new java.awt.Color(12, 0, 0));
        qtyOnHandInput.setBorder(null);
        qtyOnHandInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qtyOnHandKeyTyped(evt);
            }
        });

        unitPriceErrorDisplay.setForeground(new java.awt.Color(255, 0, 0));

        qtyOnHandErrorDisplay.setForeground(new java.awt.Color(255, 0, 0));
        qtyOnHandErrorDisplay.setPreferredSize(new java.awt.Dimension(41, 16));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(forUnitPrice)
                            .addComponent(forDescription)
                            .addComponent(forQtyOnHand)
                            .addComponent(forItemCode))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descriptionInput)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(itemCodeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(unitPriceInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(unitPriceErrorDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(qtyOnHandInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(qtyOnHandErrorDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forItemCode)
                    .addComponent(itemCodeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forDescription)
                    .addComponent(descriptionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forUnitPrice)
                    .addComponent(unitPriceInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitPriceErrorDisplay))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forQtyOnHand)
                    .addComponent(qtyOnHandInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtyOnHandErrorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void itemCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemCodeKeyTyped
        itemCodeInput.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                displaySearchResult();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                displaySearchResult();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });
    }//GEN-LAST:event_itemCodeKeyTyped

    private void btnUpdateAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateAction
        try {
            String sql = "UPDATE item SET description='" + descriptionInput.getText() + "', unitPrice=" + Double.parseDouble(unitPriceInput.getText()) + ", qtyOnHand=" + Integer.parseInt(qtyOnHandInput.getText()) + " WHERE code='" + itemCodeInput.getText() + "'";

            Connection connection = databaseConnection.getInstance().getConnection();
            Statement stm = connection.createStatement();
            stm.executeUpdate(sql);

            String tempCode = itemCodeInput.getText();
            itemCodeInput.setText("");
            descriptionInput.setText("");
            unitPriceInput.setText("");
            qtyOnHandInput.setText("");
            descriptionInput.setEditable(false);
            descriptionInput.setBackground(centralController.DarkGrey);
            unitPriceInput.setEditable(false);
            unitPriceInput.setBackground(centralController.DarkGrey);
            qtyOnHandInput.setEditable(false);
            qtyOnHandInput.setBackground(centralController.DarkGrey);
            JOptionPane.showOptionDialog(null, tempCode + " Item Update is Successful.", "Success", JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE, centralController.successIcon, centralController.getInstance().getOkButton(), centralController.getInstance().getOkButton()[0]);
            
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showOptionDialog(null, ex.getMessage(), "Error", JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE, centralController.errorIcon, centralController.getInstance().getOkButton(), centralController.getInstance().getOkButton()[0]);
        }
    }//GEN-LAST:event_btnUpdateAction

    // display search result
    private void displaySearchResult() {
        try {
            // search item
            String code = itemCodeInput.getText();
            ResultSet rst = centralController.getInstance().getItem(code);

            if (rst.next()) {
                descriptionInput.setText(rst.getString("description"));
                searchDescription = descriptionInput.getText();
                unitPriceInput.setText(rst.getString("unitPrice"));
                searchUnitPrice = Double.parseDouble(unitPriceInput.getText());
                qtyOnHandInput.setText(rst.getString("qtyOnHand"));
                searchQtyOnHand = Integer.parseInt(qtyOnHandInput.getText());
                descriptionInput.setEditable(true);
                descriptionInput.setBackground(centralController.LightGrey);
                unitPriceInput.setEditable(true);
                unitPriceInput.setBackground(centralController.LightGrey);
                qtyOnHandInput.setEditable(true);
                qtyOnHandInput.setBackground(centralController.LightGrey);
            } else {
                descriptionInput.setText("");
                searchDescription = "";
                unitPriceInput.setText("");
                searchUnitPrice = 0.00;
                qtyOnHandInput.setText("");
                searchQtyOnHand = 0;
                descriptionInput.setEditable(false);
                descriptionInput.setBackground(centralController.DarkGrey);
                unitPriceInput.setEditable(false);
                unitPriceInput.setBackground(centralController.DarkGrey);
                qtyOnHandInput.setEditable(false);
                qtyOnHandInput.setBackground(centralController.DarkGrey);
            }

        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showOptionDialog(null, ex.getMessage(), "Error", JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE, centralController.errorIcon, centralController.getInstance().getOkButton(), centralController.getInstance().getOkButton()[0]);
        }
    }

    private void btnCancelAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelAction
        itemCodeInput.setText("");
        descriptionInput.setText("");
        unitPriceInput.setText("");
        qtyOnHandInput.setText("");
        descriptionInput.setEditable(false);
        descriptionInput.setBackground(centralController.DarkGrey);
        unitPriceInput.setEditable(false);
        unitPriceInput.setBackground(centralController.DarkGrey);
        qtyOnHandInput.setEditable(false);
        qtyOnHandInput.setBackground(centralController.DarkGrey);

        instance.setVisible(false);
        itemHome.getItemHomeInstance().setVisible(true);
        centralController.getInstance().enableNavBtn();
    }//GEN-LAST:event_btnCancelAction

    private void unitPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unitPriceKeyTyped
        String value = unitPriceInput.getText();
        char ch = evt.getKeyChar();
        validateUnitPrice(value, ch);

        unitPriceInput.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                double value = Double.parseDouble(unitPriceInput.getText());
                if (value != searchUnitPrice) {
                    btnUpdate.setEnabled(true);
                } else {
                    btnUpdate.setEnabled(false);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                double value = 0.00;

                if (unitPriceInput.getText().length() > 0) {
                    value = Double.parseDouble(unitPriceInput.getText());
                } else {
                    value = 0.00;
                }

                if (value != searchUnitPrice) {
                    btnUpdate.setEnabled(true);
                } else {
                    btnUpdate.setEnabled(false);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }

        });
    }//GEN-LAST:event_unitPriceKeyTyped

    private void qtyOnHandKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyOnHandKeyTyped
        String value = qtyOnHandInput.getText();
        char ch = evt.getKeyChar();
        validateQtyOnHand(value, ch);

        qtyOnHandInput.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                int value = Integer.parseInt(qtyOnHandInput.getText());
                if (value != searchQtyOnHand) {
                    btnUpdate.setEnabled(true);
                } else {
                    btnUpdate.setEnabled(false);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                int value = 0;

                if (qtyOnHandInput.getText().length() > 0) {
                    value = Integer.parseInt(qtyOnHandInput.getText());
                } else {
                    value = 0;
                }

                if (value != searchQtyOnHand) {
                    btnUpdate.setEnabled(true);
                } else {
                    btnUpdate.setEnabled(false);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }

        });
    }//GEN-LAST:event_qtyOnHandKeyTyped

    private void descriptionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descriptionKeyTyped
        descriptionInput.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                String value = descriptionInput.getText();
                if (!value.equals(searchDescription)) {
                    btnUpdate.setEnabled(true);
                } else {
                    btnUpdate.setEnabled(false);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String value = descriptionInput.getText();
                if (!value.equals(searchDescription)) {
                    btnUpdate.setEnabled(true);
                } else {
                    btnUpdate.setEnabled(false);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                String value = descriptionInput.getText();
                if (!value.equals(searchDescription)) {
                    btnUpdate.setEnabled(true);
                } else {
                    btnUpdate.setEnabled(false);
                }
            }

        });
    }//GEN-LAST:event_descriptionKeyTyped

    private void validateUnitPrice(String value, char ch) {
        int length = value.length();

        boolean condition = true;
        int count = 0;
        if (length > 0) {
            count++;
        } else {
            count = 0;
        }

        if (count == 0 & ch == '0') {
            condition = false;
        }

        if ((length >= 0 && length < 9) & condition & (ch >= '0' && ch <= '9') || (int) ch == 8 || (int) ch == 46) {
            unitPriceInput.setEditable(true);
            unitPriceErrorDisplay.setText("");
        } else {
            unitPriceInput.setEditable(false);

            if (condition == false) {
                unitPriceErrorDisplay.setText("* Not a Q==0");
            } else if (length == 9) {
                unitPriceErrorDisplay.setText("* only 08 digits");
            } else {
                unitPriceErrorDisplay.setText("* only digits(0-9)");
            }
        }
    }

    private void validateQtyOnHand(String value, char ch) {
        int length = value.length();

        boolean condition = true;
        int count = 0;
        if (length > 0) {
            count++;
        } else {
            count = 0;
        }

        if (count == 0 & ch == '0') {
            condition = false;
        }

        if ((length >= 0 && length < 8) & condition & (ch >= '0' && ch <= '9') || (int) ch == 8) {
            qtyOnHandInput.setEditable(true);
            qtyOnHandErrorDisplay.setText("");
        } else {
            qtyOnHandInput.setEditable(false);

            if (condition == false) {
                qtyOnHandErrorDisplay.setText("* Not a Q==0");
            } else if (length == 8) {
                qtyOnHandErrorDisplay.setText("* only 08 digits");
            } else {
                qtyOnHandErrorDisplay.setText("* only digits(0-9)");
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JTextField descriptionInput;
    private javax.swing.JLabel forDescription;
    private javax.swing.JLabel forItemCode;
    private javax.swing.JLabel forQtyOnHand;
    private javax.swing.JLabel forUnitPrice;
    private javax.swing.JTextField itemCodeInput;
    private javax.swing.JLabel qtyOnHandErrorDisplay;
    private javax.swing.JTextField qtyOnHandInput;
    private javax.swing.JLabel title;
    private javax.swing.JLabel unitPriceErrorDisplay;
    private javax.swing.JTextField unitPriceInput;
    // End of variables declaration//GEN-END:variables
}
